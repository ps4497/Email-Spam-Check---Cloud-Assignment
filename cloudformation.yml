AWSTemplateFormatVersion: 2010-09-09
Description: AWS Email Spam Detection

Parameters:
  EndPointName:
    Type: String

  BucketName:
    Type: String
    Default: spam-email-detection-storage
  
  LambdaLayer:
    Type: String
    Default: arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python37-SciPy1x:115

  LambdaSrcCodeLocation:
    Type: String
    Default: lambda-source-code-050853423703

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub '${BucketName}-${AWS::AccountId}'
    DeletionPolicy: Retain

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Condition:
              StringEquals:
                aws:Referer: !Ref AWS::AccountId
          - Sid: S3Access
            Effect: Allow
            Principal: '*'
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
              - !Sub arn:aws:s3:::${S3Bucket}
      

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambdaexecution-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
      Path: /

  SpamDetectionLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaSrcCodeLocation
        S3Key: lambda_function.zip
      Description: lambda function for email
      Environment:
        Variables:
          ENDPOINT_NAME: !Ref EndPointName
      FunctionName: spam_detection_LF
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: 
       Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 60
      Layers: 
        - !Ref LambdaLayer

  LambdaTriggerRule:
    Type: AWS::Events::Rule
    Properties: 
      EventPattern: 
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
          requestParameters:
            bucketName:
              - !Ref BucketName
      Name: spam_detection_lambda_trigger
      State: ENABLED
      Targets: 
        # - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SpamDetectionLambdaFunction}
        - Arn:
            Fn::GetAtt:
              - SpamDetectionLambdaFunction
              - Arn
          Id: V1

  LambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SpamDetectionLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::GetAtt: 
          - "LambdaTriggerRule"
          - "Arn"
